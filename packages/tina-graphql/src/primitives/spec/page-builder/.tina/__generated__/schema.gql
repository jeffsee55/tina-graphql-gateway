"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String
  basename: String
  breadcrumbs(excludeExtension: Boolean): [String]
  path: String
  relativePath: String
  extension: String
  template: String
  collection: Collection
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Int!
}

type Query {
  getCollection(collection: String): Collection!
  getCollections: [Collection!]
  node(id: String): Node!
  getDocument(collection: String, relativePath: String): DocumentNode!
  getDocumentList(before: String, after: String, first: Int, last: Int): DocumentConnection!
  getPageDocument(relativePath: String): PageDocument!
  getPageList(before: String, after: String, first: Int, last: Int): PageConnection!
}

type DocumentConnectionEdges {
  cursor: String
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  label: String!
  path: String!
  format: String
  matches: String
  documents(before: String, after: String, first: Int, last: Int): DocumentConnection!
}

union DocumentNode = PageDocument

type PageSeo {
  seoTitle: String
  ogImage: String
  ogDescription: String
}

type PageBlocksHero {
  description: String
  backgroundImage: String
}

type PageBlocksCta {
  ctaText: String
  ctaStyle: String
}

union PageBlocks = PageBlocksHero | PageBlocksCta

type Page {
  title: String
  seo: PageSeo
  blocks: [PageBlocks]
}

type PageDocument implements Node {
  id: ID!
  sys: SystemInfo
  data: Page!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type PageConnectionEdges {
  cursor: String
  node: PageDocument
}

type PageConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [PageConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String!, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updatePageDocument(relativePath: String!, params: PageMutation!): PageDocument!
}

input DocumentMutation {
  page: PageMutation
}

input PageSeoMutation {
  seoTitle: String
  ogImage: String
  ogDescription: String
}

input PageBlocksHeroMutation {
  description: String
  backgroundImage: String
}

input PageBlocksCtaMutation {
  ctaText: String
  ctaStyle: String
}

input PageBlocksMutation {
  hero: PageBlocksHeroMutation
  cta: PageBlocksCtaMutation
}

input PageMutation {
  title: String
  seo: PageSeoMutation
  blocks: [PageBlocksMutation]
}
