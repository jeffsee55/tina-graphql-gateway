# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Int!
}

type Query {
  getCollection(collection: String): Collection!
  getCollections: [Collection!]!
  node(id: String): Node!
  getDocument(collection: String, relativePath: String): DocumentNode!
  getDocumentList(before: String, after: String, first: Int, last: Int): DocumentConnection!
  getPostsDocument(relativePath: String): PostsDocument!
  getPostsList(before: String, after: String, first: Int, last: Int): PostsConnection!
  getAuthorsDocument(relativePath: String): AuthorsDocument!
  getAuthorsList(before: String, after: String, first: Int, last: Int): AuthorsConnection!
  getMarketingPagesDocument(relativePath: String): MarketingPagesDocument!
  getMarketingPagesList(before: String, after: String, first: Int, last: Int): MarketingPagesConnection!
}

type DocumentConnectionEdges {
  cursor: String
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String!
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Int, last: Int): DocumentConnection!
}

union DocumentNode = PostsDocument | AuthorsDocument | MarketingPagesDocument

union PostsAuthorDocument = AuthorsDocument

type Posts {
  title: String
  hero: String
  author: PostsAuthorDocument
  body: String
}

type PostsDocument implements Node {
  id: ID!
  sys: SystemInfo!
  data: Posts!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type PostsConnectionEdges {
  cursor: String
  node: PostsDocument
}

type PostsConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [PostsConnectionEdges]
}

type Authors {
  name: String
  avatar: String
}

type AuthorsDocument implements Node {
  id: ID!
  sys: SystemInfo!
  data: Authors!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type AuthorsConnectionEdges {
  cursor: String
  node: AuthorsDocument
}

type AuthorsConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [AuthorsConnectionEdges]
}

type MarketingPagesBlocksMessageSeo {
  seoTitle: String
}

type MarketingPagesBlocksMessageNestedPageHero {
  herotitle: String
}

union MarketingPagesBlocksMessageNestedPage = MarketingPagesBlocksMessageNestedPageHero

type MarketingPagesBlocksMessage {
  messageHeader: String
  messageBody: String
  seo: [MarketingPagesBlocksMessageSeo]
  nestedPage: [MarketingPagesBlocksMessageNestedPage]
}

type MarketingPagesBlocksImage {
  heading: String
  imgDescription: String
  src: String
}

union MarketingPagesBlocks = MarketingPagesBlocksMessage | MarketingPagesBlocksImage

type MarketingPages {
  blocks: [MarketingPagesBlocks]
}

type MarketingPagesDocument implements Node {
  id: ID!
  sys: SystemInfo!
  data: MarketingPages!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type MarketingPagesConnectionEdges {
  cursor: String
  node: MarketingPagesDocument
}

type MarketingPagesConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [MarketingPagesConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String!, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updatePostsDocument(relativePath: String!, params: PostsMutation!): PostsDocument!
  updateAuthorsDocument(relativePath: String!, params: AuthorsMutation!): AuthorsDocument!
  updateMarketingPagesDocument(relativePath: String!, params: MarketingPagesMutation!): MarketingPagesDocument!
}

input DocumentMutation {
  posts: PostsMutation
  authors: AuthorsMutation
  marketingPages: MarketingPagesMutation
}

input PostsMutation {
  title: String
  hero: String
  author: String
  body: String
}

input AuthorsMutation {
  name: String
  avatar: String
}

input MarketingPagesBlocksMessageSeoMutation {
  seoTitle: String
}

input MarketingPagesBlocksMessageNestedPageHeroMutation {
  herotitle: String
}

input MarketingPagesBlocksMessageNestedPageMutation {
  hero: MarketingPagesBlocksMessageNestedPageHeroMutation
}

input MarketingPagesBlocksMessageMutation {
  messageHeader: String
  messageBody: String
  seo: [MarketingPagesBlocksMessageSeoMutation]
  nestedPage: [MarketingPagesBlocksMessageNestedPageMutation]
}

input MarketingPagesBlocksImageMutation {
  heading: String
  imgDescription: String
  src: String
}

input MarketingPagesBlocksMutation {
  message: MarketingPagesBlocksMessageMutation
  image: MarketingPagesBlocksImageMutation
}

input MarketingPagesMutation {
  blocks: [MarketingPagesBlocksMutation]
}

schema {
  query: Query
  mutation: Mutation
}
  